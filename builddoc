#!/usr/bin/env php
<?php
	# You can set these variables from the command line.
	$SPHINXOPTS  = '';
	$SPHINXBUILD = getenv('SPHINXBUILD') ?: 'sphinx-build';
	$SOURCEDIR   = 'source';
	$BUILDDIR    = 'build';

    try {
        # Check for sphinx-build
        checkExecutable(
            $SPHINXBUILD,
            "The $SPHINXBUILD command was not found. " .
            "Make sure you have Sphinx installed, then set the \$SPHINXBUILD variable to point to the full path of the $SPHINXBUILD executable. " .
            "Alternatively you can add the directory with the executable to your PATH. " .
            "If you don't have Sphinx installed, grab it from http://sphinx-doc.org/"
        );

        # Internal variables.
        $SOURCEDIR     = $SOURCEDIR;
        $BUILDDIR      = $BUILDDIR;
        $ALLSPHINXOPTS = "-D latex_paper_size=a4 $SPHINXOPTS";

        # function to manage languages
        $generateByLang = function($type, $format = null, $callback = null) use ($SPHINXBUILD, $ALLSPHINXOPTS, $SOURCEDIR, $BUILDDIR) {
            $format = $format ?: $type;

            foreach (glob($SOURCEDIR . '/*') as $path) {
                $lang = basename($path);

                createDirectory("$BUILDDIR/$lang/doctrees");
                createDirectory("$BUILDDIR/$lang/$format");

                command("$SPHINXBUILD -b $type -d $BUILDDIR/$lang/doctrees $ALLSPHINXOPTS $SOURCEDIR/$lang $BUILDDIR/$lang/$format");

                if ($callback) {
                    $callback($SPHINXBUILD, $ALLSPHINXOPTS, "$SOURCEDIR/$lang", "$BUILDDIR/$lang");
                }

                writeln();
                writeln("Build for language \"$lang\" finished.");
                writeln("Documentation was generated in format \"$format\" in $BUILDDIR/$lang.");
                writeln();
            }

            writeln("Build finished.");
            writeln("Documentation was generated in format \"$format\" in $BUILDDIR.");
            writeln();
        };

        # get command
        $command = isset($argv[1]) ? $argv[1] : 'help';

        switch ($command) {
            case 'clean':
            	command("rm -rf $BUILDDIR/*");
            break;

            case 'html':
                $generateByLang('html');
            break;

            case 'epub':
                $generateByLang('epub');
            break;

            case 'pdf':
                checkExecutable(
                    'pdflatex',
                    "The pdflatex command was not found."
                );

                $generateByLang(
                    'latex',
                    'pdf',
                    function($SPHINXBUILD, $ALLSPHINXOPTS, $SOURCEDIR, $BUILDDIR) {
                        command("make -C $BUILDDIR/pdf all-pdf");
                    }
                );
            break;

            case 'text':
                $generateByLang('text');
            break;

            case 'linkcheck':
                $generateByLang(
                    'linkcheck',
                    null,
                    function($SPHINXBUILD, $ALLSPHINXOPTS, $SOURCEDIR, $BUILDDIR) {
                    	writeln();
                    	writeln("Link check complete; look for any errors in the above output or in $BUILDDIR/linkcheck/output.txt.");
                    }
                );
            break;

            default:
                throw new Exception("undefined $command command.");
            case 'help':
                writeln("Please use 'make <target>' where <target> is one of");
                writeln("  html       to make standalone HTML files");
                writeln("  epub       to make an epub");
                writeln("  pdf        to make a pdf");
                writeln("  text       to make text files");
                writeln("  linkcheck  to check all external links for integrity");
            break;

            case 'gettext':
                command("$SPHINXBUILD -b gettext $ALLSPHINXOPTS $SOURCEDIR/en $BUILDDIR/en/pot");
            break;
        }
    } catch (Exception $e) {
        writeln('Error: ' . $e->getMessage());
    }

    function writeln($text = '') {
        echo "$text\n";
    }

    function command($command, $display = true) {
        if ($display) {
            writeln("> $command");
            passthru($command, $returnValue);
            writeln();
        } else {
            $output = array();
            exec($command, $output, $returnValue);
        }

        return $returnValue;
    }

    function createDirectory($path) {
        if (!file_exists($path)) {
            mkdir($path, 0755, true);
        }
    }

    function checkExecutable($executable, $errorMessage) {
        /*if (command("which $executable", false) !== 0) {
            throw new Exception($errorMessage);
        }*/
    }
